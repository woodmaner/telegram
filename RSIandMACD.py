import asyncio
import logging
import requests
import numpy as np
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# Telegram API
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
CHAT_ID = "YOUR_CHAT_ID"

# Binance API –¥–ª—è —Ü–µ–Ω—ã BTC
API_URL = "https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1h&limit=100"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RSI
RSI_PERIOD = 14
OVERSOLD = 30  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
OVERBOUGHT = 70  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MACD
SHORT_EMA = 12
LONG_EMA = 26
SIGNAL_EMA = 9

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def get_btc_prices():
    try:
        response = requests.get(API_URL)
        data = response.json()
        prices = [float(candle[4]) for candle in data]  # –ó–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–µ–π
        return prices
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ RSI
def calculate_rsi(prices, period=RSI_PERIOD):
    df = pd.DataFrame(prices, columns=["Close"])
    df["diff"] = df["Close"].diff()

    gain = df["diff"].apply(lambda x: x if x > 0 else 0)
    loss = df["diff"].apply(lambda x: -x if x < 0 else 0)

    avg_gain = gain.rolling(window=period, min_periods=1).mean()
    avg_loss = loss.rolling(window=period, min_periods=1).mean()

    rs = avg_gain / (avg_loss + 1e-10)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    rsi = 100 - (100 / (1 + rs))

    return rsi.iloc[-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ MACD
def calculate_macd(prices, short=SHORT_EMA, long=LONG_EMA, signal=SIGNAL_EMA):
    df = pd.DataFrame(prices, columns=["Close"])
    df["ShortEMA"] = df["Close"].ewm(span=short, adjust=False).mean()
    df["LongEMA"] = df["Close"].ewm(span=long, adjust=False).mean()
    df["MACD"] = df["ShortEMA"] - df["LongEMA"]
    df["Signal"] = df["MACD"].ewm(span=signal, adjust=False).mean()

    last_macd = df["MACD"].iloc[-1]
    last_signal = df["Signal"].iloc[-1]
    prev_macd = df["MACD"].iloc[-2]
    prev_signal = df["Signal"].iloc[-2]

    return last_macd, last_signal, prev_macd, prev_signal

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RSI –∏ MACD –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_indicators():
    prices = get_btc_prices()
    if prices:
        rsi = calculate_rsi(prices)
        macd, signal, prev_macd, prev_signal = calculate_macd(prices)

        print(f"RSI: {rsi:.2f}, MACD: {macd:.4f}, Signal: {signal:.4f}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏

        messages = []
        if rsi < OVERSOLD:
            messages.append(f"‚ö†Ô∏è RSI = {rsi:.2f}, BTC –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω! –í–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ üöÄ")
        elif rsi > OVERBOUGHT:
            messages.append(f"‚ö†Ô∏è RSI = {rsi:.2f}, BTC –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω! –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è üìâ")

        if prev_macd < prev_signal and macd > signal:
            messages.append(f"üü¢ MACD –ø–µ—Ä–µ—Å–µ–∫ —Å–∏–≥–Ω–∞–ª –≤–≤–µ—Ä—Ö! –í–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç üöÄ")
        elif prev_macd > prev_signal and macd < signal:
            messages.append(f"üî¥ MACD –ø–µ—Ä–µ—Å–µ–∫ —Å–∏–≥–Ω–∞–ª –≤–Ω–∏–∑! –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è üìâ")

        for msg in messages:
            await bot.send_message(CHAT_ID, msg)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è RSI –∏ MACD –±–∏—Ç–∫–æ–∏–Ω–∞ üìà")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def on_startup(_):
    scheduler.add_job(check_indicators, "interval", minutes=30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    scheduler.start()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
